#ifndef GC_H
#define GC_H

#include <stdlib.h>

/*
* Enables use of specific "gc scopes". They are ID's
* that can be attached to a register for "scoping"
* gc freeing actions.
*
* @max_protected: Max number of protected scopes
*/
void gc_enable_protected(size_t max_protected);

/*
* Should be called if gc_enable_protected was called,
* for releasing protected heap at the end of runtime.
* If gc_enable_protected was not called this function
* does nothing.
*/
void gc_release_protected();

/*
* Returns unique code for "gc protected scope".
* Returns 0 if could not generate code. i.e.
* gc_enable_protected was not called or
* max_protected capacity is full.
*/
int gc_request_protected();

/*
* Registers pointer to be released under @code
* scope. If @code was not generated by request_protected
* this funcion does nothing.
*
* @ptr: Pointer to be freed.
*/
void gc_register_protected(int code, void *ptr);

/*
* Frees all pointers registered under @code scope.
*/
void gc_execute_protected(int code);

/*
* Registers pointer to be released under public scope.
* 
* @ptr: Pointer to be freed.
*/
void gc_register(void *ptr);

/*
* Frees all pointers registered under public scope.
* It is equivalent to call gc_execute_protected(0)
*/
void gc_execute();

/*
* Frees all pointers registered. Overrides scope selection.
* Implicitly calls gc_release_protected.
*/
void gc_force_execute();

#endif /* GC_H */